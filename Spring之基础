------------------------------------------------------ 监听和事件------------------------------------------------------

观察者模式
观察者（Observer）模式又名发布-订阅（Publish/Subscribe）模式。GOF给观察者模式如下定义：定义对象间的一种一对多的依赖关系，
 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 
观察者：
（Observer）将自己注册到被观察对象（Subject）中，被观察对象将观察者存放在一个容器（Container）里。 
被观察：
被观察对象发生了某种变化，从容器中得到所有注册过的观察者，将变化通知所有观察者，观察者们接收变化，如果对该变化感兴趣，那么 进行更新。 
撤销观察：
观察者告诉被观察者要撤销观察，被观察者从容器中将观察者去除。

事件模型
事件是可以被控件识别的操作，如按下确定按钮，选择某个单选按钮或者复选框。每一种控件有自己可以识别的事件，如窗体的加载、单击、双击等事件，
编辑框(文本框)的文本改变事，等等。

事件模型可以使用观察者模式实现：事件可以作为作为观察者模式中的 被观察对象的”变化” ，观察者接收所有事件，当对某个事件感兴趣时，做出变化。


Spring中的事件机制：
ApplicationListener： 就是我们的 Observer，需要到容器中注册。他要关心他所关心的ApplicationEvent 。一般有如下代码：
if (event instanceof BlackListEvent) {

}

ApplicationEventMulticaster：是我们的SUBJECT一个代理。他会管理我们的 ApplicationListener 。 
ApplicationEvent： 是事件，它就是媒介，充当介质的作用。

使用ApplicationEventMulticaster 示例：
下面程序中定义了两个监听器和两个事件，开始监听器只对开始事件作出相应，结束监听器对结束事件作出相应。

public class Tester {

    public static void main(String[] args) {
        //构建广播器
        ApplicationEventMulticaster multicaster = new    SimpleApplicationEventMulticaster();
        //添加开始监听器
        multicaster.addApplicationListener(new MyStartListener());
        //添加结束监听器
        multicaster.addApplicationListener(new MyEndListener());

        System.out.println("--1---");
        multicaster.multicastEvent(new MyStartEvent(""));//广播开始事件
        System.out.println("--2---");
        multicaster.multicastEvent(new MyEndEvent(""));//广播结束事件  
    } 

    public static class MyStartEvent extends ApplicationEvent {

        public MyStartEvent(Object source) {
            super(source);
        }
    }

    public static class MyEndEvent extends ApplicationEvent { 
        public MyEndEvent(Object source) {
            super(source);
        }
    }

    public static class MyStartListener implements ApplicationListener {

        @Override
        public void onApplicationEvent(ApplicationEvent event) {
            if (event instanceof MyStartEvent ) {
                System.out.println("程序开始运行Listener！");
            }
        }
    }

    public static class MyEndListener implements ApplicationListener {

        @Override
        public void onApplicationEvent(ApplicationEvent event) {
            if (event instanceof MyEndEvent) {
                System.out.println("程序结束运行...Listener");
            }
        }
    }
}

运行结果：
–1— 
程序开始运行Listener！ 
–2— 
程序结束运行…Listener 
从这个小例子中可以看出Spring对广播事件是如何使用的。

------------------------------------------------------ 监听和事件------------------------------------------------------

------------------------------------------------- PropertySource和Enviroment--------------------------------------------------
PropertySource是一个抽象类，它包含一个source和一个name。source可以是map或其他，通常是一组键值对。 
这个类结构简化如下：
public abstract class PropertySource<T> {protected final   

    String name;//属性源名称
    protected final T source;//属性源（比如来自Map，那就是一个Map对象）
    public String getName();  //获取属性源的名字  
    public T getSource();        //获取属性源  
    public boolean containsProperty(String name);  //是否包含某个属性  
    public abstract Object getProperty(String name);   //得到属性名对应的属性值   
} 


主要类体系：
MapPropertySource                            MapPropertySource的source来自于一个Map
PropertiesPropertySource                     source是一个Properties对象，继承自MapPropertySource。与MapPropertySource用法相同
ResourcePropertySource                       继承自PropertiesPropertySource，它的source来自于一个Resource资源
ServletConfigPropertySource                  source为ServletConfig对象
ServletContextPropertySource                 source为ServletContext对象
StubPropertySource                           临时作为一个PropertySource的占位，后期会被真实的PropertySource取代
SystemEnvironmentPropertySource              继承自MapPropertySource，它的source也是一个map，但来源于系统环境
【重点】与MapPropertySource不同的是，取值时它将会忽略大小写，”.”和”_”将会转化。遇到转化情况会打印出日志。用法如下：
SystemEnvironmentPropertySource source =
                new SystemEnvironmentPropertySource("systemEnvironment",(Map)System.getenv());
System.out.println(source.getProperty("PROCESSOR_LEVEL"));
System.out.println(source.getProperty("PROCESSOR_LEVEL".toLowerCase()));
System.out.println(source.getProperty("PROCESSOR.LEVEL"));
输出如下：
6
09:23:38.833 [main] DEBUG  org.springframework.core.env.SystemEnvironmentPropertySource - PropertySource [systemEnvironment] does not contain 'processor_level', but found equivalent 'PROCESSOR_LEVEL'
6
09:23:38.836 [main] DEBUG org.springframework.core.env.SystemEnvironmentPropertySource - PropertySource [systemEnvironment] does not contain 'PROCESSOR.LEVEL', but found equivalent 'PROCESSOR_LEVEL'
6

CompositePropertySource                        内部可以保存多个PropertySource
private final Set<PropertySource<?>> propertySources = new LinkedHashSet<PropertySource<?>>();
取值时依次遍历这些PropertySource



PropertySources
包含多个PropertySource，继承了Iterable接口，所以它的子类还具有迭代的能力。 
接口定义：
public interface PropertySources extends Iterable<PropertySource<?>> {

    boolean contains(String name);//是否包含某个PropertySource

    PropertySource<?> get(String name);//获取某个PropertySource
}

实现类 MutablePropertySources
它包含了一个CopyOnWriteArrayList集合，用来包含多个PropertySource
private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<PropertySource<?>>();

这个类还具有几个比较重要的方法，用来向集合中加减PropertySource 
addFirst 
addLast 
addBefore 
addAfter 
remove



PropertyResolver接口
实现这个类的接口具有解析PropertySource、根据PropertySource转换文本中的占位符的能力
public interface PropertyResolver {  

    //是否包含某个属性  
    boolean containsProperty(String key);  

    //获取属性值 如果找不到返回null   
    String getProperty(String key);  

    //获取属性值，如果找不到返回默认值        
    String getProperty(String key, String defaultValue);  

    //获取指定类型的属性值，找不到返回null  
    <T> T getProperty(String key, Class<T> targetType);  

    //获取指定类型的属性值，找不到返回默认值  
    <T> T getProperty(String key, Class<T> targetType, T defaultValue);  

    //获取属性值为某个Class类型，找不到返回null，如果类型不兼容将抛出ConversionException  
    <T> Class<T> getPropertyAsClass(String key, Class<T> targetType);  

    //获取属性值，找不到抛出异常IllegalStateException  
    String getRequiredProperty(String key) throws IllegalStateException;  

    //获取指定类型的属性值，找不到抛出异常IllegalStateException         
    <T> T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;  

    //替换文本中的占位符（${key}）到属性值，找不到不解析  
    String resolvePlaceholders(String text);  

    //替换文本中的占位符（${key}）到属性值，找不到抛出异常IllegalArgumentException  
    String resolveRequiredPlaceholders(String text) throws IllegalArgumentException;  

}  

它的实现类主要有两种： 
1 各种Resolver：主要是PropertySourcesPropertyResolver 
2 各种Evironment:下一节介绍
## PropertySourcesPropertyResolver示例
MutablePropertySources sources = new MutablePropertySources();
sources.addLast(new MapPropertySource("map", new HashMap<String, Object>() {
            {
                put("name", "wang");
                put("age", 12);
            }
}));//向MutablePropertySources添加一个MapPropertySource

PropertyResolver resolver = new PropertySourcesPropertyResolver(sources);
System.out.println(resolver.containsProperty("name"));//输出 true
System.out.println(resolver.getProperty("age"));//输出 12
System.out.println(resolver.resolvePlaceholders("My name is ${name} .I am ${age}."));
//输出 My name is wang .I am 12.




Environment

开发环境，比如JDK环境，系统环境；每个环境都有自己的配置数据，如System.getProperties()可以拿到JDK环境数据、System.getenv()可以拿到系统变量，
ServletContext.getInitParameter()可以拿到Servlet环境配置数据。 
Spring抽象了一个Environment来表示Spring应用程序环境配置，它整合了各种各样的外部环境，并且提供统一访问的方法。
public interface Environment extends PropertyResolver {  
    //得到当前明确激活的剖面  
    String[] getActiveProfiles();  

    //得到默认激活的剖面，而不是明确设置激活的  
    String[] getDefaultProfiles();  

    //是否接受某些剖面  
    boolean acceptsProfiles(String... profiles);  

}  

从API上可以看出，除了可以解析相应的属性信息外，还提供了剖面相关的API，
目的是： 可以根据剖面有选择的进行注册组件/配置。比如对于不同的环境注册不同的组件/配置（正式机、测试机、开发机等的数据源配置）
它的实现类主要有两个：

StandardEnvironment：标准环境，普通Java应用时使用，会自动注册System.getProperties() 和 System.getenv()到环境； 
StandardServletEnvironment：标准Servlet环境，其继承了StandardEnvironment，Web应用时使用，除了StandardEnvironment外，
                            会自动注册ServletConfig（DispatcherServlet）、ServletContext及有选择性的注册JNDI实例到环境； 

使用示例如下：
//会自动注册 System.getProperties() 和 System.getenv()  
Environment environment = new StandardEnvironment();  
System.out.println(environment.getProperty("file.encoding"));  


Profile
profile，剖面，大体意思是：我们程序可能从某几个剖面来执行应用，比如正式机环境、测试机环境、开发机环境等，
        每个剖面的配置可能不一样（比如开发机可能使用本地的数据库测试，正式机使用正式机的数据库测试）等；因此呢，就需要根据不同的环境选择不同的配置； 
profile有两种： 
默认的：通过环境中“spring.profiles.default”属性获取，如果没有配置默认值是“default” 
明确激活的：通过环境中“spring.profiles.active”获取 
查找顺序是：先进性明确激活的匹配，如果没有指定明确激活的（即集合为空）就找默认的；配置属性值从Environment读取。

@Profile()的使用 
可以使用在类或方法上，表示这个bean或方法属于哪个剖面 
示例：
@Configuration
public class Test {
    public static void main(String[] args) throws ClassNotFoundException {
        System.setProperty("spring.profiles.active","dev");
        ApplicationContext context = new AnnotationConfigApplicationContext(Test.class);
        System.out.println(Arrays.asList(context.getBeanNamesForType(String.class)));
    }

    @Bean()
    @Profile("test")
    public String str1() {
        return "str1";
    }

    @Bean
    @Profile("dev")
    public String str2() {
        return "str2";
    }

    @Bean
    public String str3() {
        return "str3";
    }
}

将会输出[str2, str3] 
因为str1的剖面为test，既不是激活的dev–str2，也不是默认的default—str3

@PropertySource()
Java Config方式的注解，其属性会自动注册到相应的Environment
@Configuration  
@PropertySource(value = "classpath:resources.properties", ignoreResourceNotFound = false)  
public class AppConfig {  
} 



------------------------------------------------- PropertySource和Enviroment--------------------------------------------------
---------------------------------------------------- 统一抽象资源Resource------------------------------------------------------
JDK操纵底层资源基本就是 java.net.URL 、java.io.File 等。处理这些资源需要使用不同的接口，这就增加了我们系统的复杂性，
正因为这样，Spring开发者抽象了一个Resource接口 ，提供了更强大的访问外部资源的能力。 
上一章中的PropertySource表示Spring内部的key-value资源，而Resource表示一个外部资源。PropertySource可以来源于一个Resource。

InputStreamSource接口
Resouce接口继承了 InputStreamSource.
public interface InputStreamSource {  
    InputStream getInputStream() throws IOException;  
}  

getInputStream()方法：每次调用都将返回一个当前资源对应的java.io. InputStream字节流，调用者在使用完毕后必须关闭该资源

Resource 接口
public interface Resource extends InputStreamSource {  
       boolean exists();  
       boolean isReadable();  
       boolean isOpen();  
       URL getURL() throws IOException;  
       URI getURI() throws IOException;  
       File getFile() throws IOException;  
       long contentLength() throws IOException;  
       long lastModified() throws IOException;  
       Resource createRelative(String relativePath) throws IOException;  
       String getFilename();  
       String getDescription();  
}  

exists()：用于判断对应的资源是否真的存在。 
isReadable()：用于判断对应资源的内容是否可读。需要注意的是当其结果为true的时候，其内容未必真的可读，但如果返回false，则其内容必定不可读。 
isOpen()：用于判断当前资源是否代表一个已打开的输入流，如果结果为true，则表示当前资源的输入流不可多次读取，而且在读取以后需要对它进行关闭，
          以防止内存泄露。该方法主要针对于实现类InputStreamResource，实现类中只有它的返回结果为true，其他都为false。 
getURL()：返回当前资源对应的URL。如果当前资源不能解析为一个URL则会抛出异常。如ByteArrayResource就不能解析为一个URL。 
getURI()：返回当前资源对应的URI。如果当前资源不能解析为一个URL则会抛出异常。 
getFile()：返回当前资源对应的File。如果当前资源不能以绝对路径解析为一个File则会抛出异常。 
contentLength() :资源的长度 
lastModified：返回当前Resource代表的底层资源的最后修改时间。 
createRelative：用于创建相对于当前Resource代表的底层资源的资源，比如当前Resource代表文件资源“d:/abc/”则createRelative（“xyz.txt”）
                将返回表文件资源“d:/abc/xyz.txt” 
getFilename：返回当前Resource代表的底层文件资源的文件路径，比如File资源“file://d:/test.txt”将返回“d:/test.txt”，
             而URL资源http://www.javass.cn将返回“”，因为只返回文件路径。 
getDescription：返回当前Resource代表的底层资源的描述信息。


Resource的主要实现类
抛开Resource接口及其子类复杂的类结构图。我们看一下它的主要实现类。

抽象类AbstractResource
实现了Resource接口，是大多数Resource的实现类的基类，提供了很多通用的方法。 
比如exists方法会检查是否一个文件或者输入流能够被打开。isOpen永远返回false。”getURL()” 和”getFile()”方法会抛出异常。 
toString将会返回描述信息。

ClassPathResource
ClassPathResource代表classpath路径的资源，将使用给定的Class或ClassLoader进行加载classpath 资源 。“isOpen”永远返回false，表示可多次读取资源。

JDK获取资源有两种方式
第一种 使用Class对象的getResource(String path)获取资源URL，getResourceAsStream(String path)获取资源流。 
       参数既可以是当前class文件相对路径（以文件夹或文件开头），也可以是当前class文件的绝对路径（以“/”开头,相对于当前classpath根目录） 
第二种 使用ClassLoader对象的getResource(String path)获取资源URL，getResourceAsStream(String path)获取资源流。参数只能是绝对路径，
       但不以“/”开头

ClassPathResource加载资源替代了Class类和ClassLoader类加载类路径资源方法，提供一致的访问方式。

ClassPathResource的三个实例变量：
private final String path;
private ClassLoader classLoader;
private Class<?> clazz;

ClassPathResource提供了三个public构造器：
public ClassPathResource(String path)：使用ClassUtils.getDefaultClassLoader()指定例变量classLoader 
public ClassPathResource(String path, ClassLoader classLoader)： 指定例变量classLoader 
public ClassPathResource(String path, Class< ?> clazz)：指定实例变量Class< ?> clazz

ClassPathResource如何获取资源：
@Override
public URL getURL() throws IOException {
        URL url = resolveURL();
        if (url == null) {
            throw new FileNotFoundException(getDescription() + " cannot be resolved to URL because it does not exist");
        }
        return url;
}
protected URL resolveURL() {
        if (this.clazz != null) {
            return this.clazz.getResource(this.path);
        }
        else if (this.classLoader != null) {
            return this.classLoader.getResource(this.path);
        }
        else {
            return ClassLoader.getSystemResource(this.path);
        }
}

通过getURL()和resolveURL()可知，获取URL资源的顺序为： 
如果存在实例变量this.clazz ，则使用Class对象的getResource获取资源 
不存在clazz，则通过this.classLoader的 getResource获取资源 
不存在this.classLoader则使用 ClassLoader.getSystemResource获取资源。 
++获取资源流与获取资源URL的方法一致


FileSystemResource

可用来获取文件系统里面的资源。我们可以通过对应资源文件的文件路径来构建一个FileSystemResource。FileSystemResource还可以往对应的资源文件里面写内容，
当然前提是当前资源文件是可写的，这可以通过其isWritable()方法来判断。FileSystemResource对外开放了对应资源文件的输出流，
可以通过getOutputStream()方法获取到。 
可用来代表URL对应的资源，它对URL做了一个简单的封装。通过给定一个URL地址，我们就能构建一个UrlResource。

ByteArrayResource

继承自AbstractResource，ByteArrayResource代表byte[]数组资源，对于“getInputStream”操作将返回一个ByteArrayInputStream。

使用：
public static void main(String[] args) throws Exception {
        Resource resource=new ByteArrayResource("hello world".getBytes());

        //1.getInputStream()
        InputStream inputStream= resource.getInputStream();
        byte[] bytes=new byte[inputStream.available()];
        inputStream.read(bytes);
        System.out.println(new String(bytes));//hello world
        inputStream.close();

        //2.其他方法
        System.out.println(resource.isOpen());//false
        System.out.println(resource.contentLength());//11
        //...

        //3.抛出异常方法 lastModified() getFile()...等方法
        //System.out.println(resource.lastModified()); 
        //System.out.println(resource.getFile());


    }
    
ServletContextResource

是针对于ServletContext封装的资源，用于访问ServletContext环境下的资源。ServletContextResource持有一个ServletContext的引用，
其底层是通过ServletContext的getResource()方法和getResourceAsStream()方法来获取资源的。

InputStreamResource

是针对于输入流封装的资源，它的构建需要一个输入流。 对于“getInputStream ”操作将直接返回该字节流，因此只能读取一次该字节流，即“isOpen”永远返回true。

UrlResource

UrlResource代表URL资源，用于简化URL资源访问。 
UrlResource一般支持如下资源访问： 
-http：通过标准的http协议访问web资源，如new UrlResource(“http://地址”)； 
-ftp：通过ftp协议访问资源，如new UrlResource(“ftp://地址”)； 
-file：通过file协议访问本地文件系统资源，如new UrlResource(“file:d:/test.txt”)；

ResourceLoader

在Spring里面还定义有一个ResourceLoader接口，该接口中只定义了一个用于获取Resource的getResource(String location)方法。
这个接口的作用是判断传入的Resource相关字符串（位置，URL等），根据location参数返回不同的Resource。 
ResourceLoader可以看做是Resource的工厂类

DefaultResourceLoader
DefaultResourceLoader是ResourceLoader最基本的实现类。 
DefaultResourceLoader在获取Resource时采用的是这样的策略： 
-首先判断指定的location是否含有“/”前缀有则返回ClassPathContextResource； 
-然后判断指定的location是否含有“classpath:”前缀，如果有则把location去掉“classpath:”前缀返回对应的ClassPathResource； 
-否则就把它当做一个URL来处理，封装成一个UrlResource进行返回； 
-如果当成URL处理也失败的话就把location对应的资源当成是一个ClassPathContextResource进行返回。 
源码如下：

public Resource getResource(String location) {
        Assert.notNull(location, "Location must not be null");
        if (location.startsWith("/")) {
            return getResourceByPath(location);
            //返回new ClassPathContextResource(path, getClassLoader());
        }
        else if (location.startsWith("classpath:")) {
            return new ClassPathResource(location.substring("classpath:".length()), getClassLoader());
        }
        else {
            try {
                // 转换为URL...
                URL url = new URL(location);
                return new UrlResource(url);
            }
            catch (MalformedURLException ex) {
                // url转换失败 
                return getResourceByPath(location);
                //返回new ClassPathContextResource(path, getClassLoader());
            }
        }
}
测试代码：
ResourceLoader loader = new DefaultResourceLoader();
Resource resource1 = loader.getResource("/application.properties");
System.out.println(resource1.getClass());
//class org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource   

Resource resource2 = loader.getResource("classpath:application.properties");
System.out.println(resource2.getClass());
// class org.springframework.core.io.ClassPathResource 

Resource resource3 = loader.getResource("http://blog.csdn.net/isea533/article/details/42102297");
System.out.println(resource3.getClass());
//class org.springframework.core.io.UrlResource 

Resource resource4 = loader.getResource("dsfsdfsdfawewrwrwr");
System.out.println(resource4.getClass());
//class org.springframework.core.io.DefaultResourceLoader$ClassPathContextResource  

ResourcePatternResolver

Spring提供ResourcePatternResolver接口来加载多个Resource，该接口继承了ResourceLoader并添加了
“Resource[] getResources(String locationPattern)”用来加载多个Resource：

locationPattern的前缀：
classpath： 用于加载类路径（包括jar包）中的一个且仅一个资源； 
classpath* ： 用于加载类路径（包括jar包）中的所有匹配的资源，可使用Ant路径模式。

Ant路径通配符支持“？”、“*”、“**”，注意通配符匹配不包括目录分隔符“/”：
“?”：匹配一个字符，如“config?.xml”将匹配“config1.xml”；
“*”：匹配零个或多个字符串，如“cn/*/config.xml”将匹配“cn/javass/config.xml”，但不匹配匹配“cn/config.xml”；而“cn/config-*.xml”将匹配“cn/config-dao.xml”；
“**”：匹配路径中的零个或多个目录，如“cn/**/config.xml”将匹配“cn /config.xml”，也匹配“cn/javass/spring/config.xml”；而“cn/javass/config-**.xml”
将匹配“cn/javass/config-dao.xml”，即把“**”当做两个“*”处理。



ApplicationContext
大多数ApplicationContext都实现了ResourceLoader接口，所以它们也具有载入资源

---------------------------------------------------- 统一抽象资源Resource------------------------------------------------------

----------------------------------------------------国际化MessageSource-------------------------------------------------------
假设我们正在开发一个支持多国语言的Web应用程序，要求系统能够根据客户端的系统的语言类型返回对应的界面：英文的操作系统返回英文界面，
而中文的操作系统则返回中文界面——这便是典型的i18n国际化问题。对于有国际化要求的应用系统，我们不能简单地采用硬编码的方式编写用户界面信息、
报错信息等内容，而必须为这些需要国际化的信息进行特殊处理。简单来说，就是为每种语言提供一套相应的资源文件，并以规范化命名的方式保存在特定的目录中，
由系统自动根据客户端语言选择适合的资源文件。

国际化信息”也称为“本地化信息”，一般需要两个条件才可以确定一个特定类型的本地化信息，它们分别是“语言类型”和“国家/地区的类型”。
如中文本地化信息既有中国大陆地区的中文，又有中国台湾、中国香港地区的中文，还有新加坡地区的中文。 

JDK中的国际化API
Java通过java.util.Locale类表示一个本地化对象，它允许通过语言参数和国家/地区参数创建一个确定的本地化对象。
Locale locale=new Locale("zh","cn");//中文，中国
Locale locale2=new Locale("en","us");//英文，美国
Locale locale3=new Locale("zh");//中文--不指定国家
Locale locale4=Locale.CHINA;//中文，中国
Locale locale5=Locale.CHINESE;//中文

支持国家化的JDK类NumberFormat、DateFormat、MessageFormat

【NumberFormat】可以处理数字，百分数，货币等。下面以货币为例：
Locale locale=new Locale("zh","cn");//中文，中国
NumberFormat format=NumberFormat.getCurrencyInstance(locale);
System.out.println(format.format(12.34));

Locale locale2 =new Locale("en","us");//英文，美国
NumberFormat format2=NumberFormat.getCurrencyInstance(locale2);
System.out.println(format2.format(13.45));
//输出
//￥12.34
//$13.45  

DateFormat】 通过DateFormat#getDateInstance(int style,Locale locale)方法按本地化的方式对日期进行格式化操作。
该方法第一个入参为时间样式，第二个入参为本地化对象
Locale locale=new Locale("zh","cn");//中文，中国
DateFormat dateFormat =DateFormat.getDateInstance(DateFormat.YEAR_FIELD,locale) ;
System.out.println(dateFormat.format(new Date()));
//2016年6月20日

【MessageFormat】在NumberFormat和DateFormat的基础上提供了强大的占位符字符串的格式化功能，它支持时间、货币、数字以及对象属性的格式化操作。 
简单的占位符替换：
String str1 = "{0}，你好！你于{1}在农业银行存入{2} 元。";
String result = MessageFormat.format(str1, "小明", new Date(), 1245.12);
System.out.println(result);
//小明，你好！你于16-6-20 下午6:29在农业银行存入1,245.12 元。

占位符指定数据类型和格式化类型：
String str1 = "{0}，你好！你于{1,date,long}在农业银行存入{2,number, currency}。";
MessageFormat format = new MessageFormat(str1, Locale.CHINA);
Object[] o = {"小红", new Date(), 1313};
System.out.println(format.format(o));
//小红，你好！你于2016年6月20日在农业银行存入￥1,313.00 。


加载资源文件
资源文件的命名规范如下
资源名_语言代码_国/地区代码.properties
举一个例子：假设资源名为msg，则语言为英文，国家为美国，则与其对应的本地化资源文件命名为msg_en_US.properties。

name=Xiaoming
description=He is 19

如果对应语言为中文，文件则命名为resource_zh_ CN.properties。
资源文件对文件内容有严格的要求：只能包含ASCII字符，所以必须将非ASCII字符的内容转换为Unicode代码的表示方式。 资源文件内容如下：

#小明
name=\u5c0f\u660e
#他十九岁了
description=\u4ed6\u5341\u4e5d\u5c81\u4e86

Java为我们提供了用于加载本地化资源文件的方便类java.util.ResourceBoundle。 
ResourceBoundle为加载及访问资源文件提供便捷的操作，下面的语句从相对于类路径的目录中加载一个名为msg的本地化资源文件：
//加载msg_zh_cn.properties
ResourceBundle bundle = ResourceBundle.getBundle("com/jazz/msg", Locale.CHINA);
System.out.println(bundle.getString("name"));
System.out.println(bundle.getString("description"));
//加载msg_en_us.properties
ResourceBundle bundle2 = ResourceBundle.getBundle("com/jazz/msg", Locale.US);
System.out.println(bundle2.getString("name"));
System.out.println(bundle2.getString("description"));

//=========输出============
小明
他十九岁了
Xiaoming
He is 19

在上面的资源文件中，属性值都是一般的字符串，它们不能结合运行时的动态参数构造出灵活的信息，而这种需求是很常见的。
要解决这个问题很简单，只须使用带占位符的格式化串作为资源文件的属性值并结合使用MessageFormat就可以满足要求了。


MessageSource
public interface MessageSource {

     //code表示国际化资源中的属性名；args用于传递格式化串占位符所用的运行期参数；
     //当在资源找不到对应属性名时，返回defaultMessage参数所指定的默认信息；
     //locale表示本地化对象；
    String getMessage(String code, Object[] args, String defaultMessage, Locale locale);

    //与上面的方法类似，只不过在找不到资源中对应的属性名时，
    //直接抛出NoSuchMessageException异常；
    String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException;

    //将属性名、参数数组以及默认信息封装起来，它的功能和第一个接口方法相同。
    String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException;

}

MessageSource的体系结构
HierarchicalMessageSource接口】 
添加了两个方法，建立父子层级的MessageSource结构。该接口的setParentMessageSource (..)方法用于设置父MessageSource，
而getParentMessageSource()方法用于返回父MessageSource。

【ResourceBundleMessageSource和ReloadableResourceBundleMessageSource】 
它们基于Java的ResourceBundle基础类实现，可以通过资源名加载国际化资源。ReloadableResourceBundleMessageSource提供了定时刷新功能，
允许在不重启系统的情况下，更新资源的信息。StaticMessageSource主要用于程序测试，它允许通过编程的方式提供国际化信息。
而DelegatingMessageSource是为方便操作父MessageSource而提供的代理类。


使用示例
ResourceBundleMessageSource，结合了JDK中ResourceBundle和MessageFormat的功能，使用实例：
#国际化文件 msg_en_us.properties
description=He is {0},He has {1,number,currency}

ResourceBundleMessageSource source = new ResourceBundleMessageSource();
source.setBasename("com/jazz/msg");
String result=source.getMessage("description", new Object[]{19, 12.34}, Locale.US);
System.out.println(result);

//====输出===
He is 19,He has $12.34


ApplicationContext与MessageSource
ApplicationContext实现了MessageSource的接口。也就是说ApplicationContext的实现类本身也是一个MessageSource对象。

ApplicationContext#initMessageSource()方法所执行的工作就是初始化容器中的国际化信息资源：它从BeanDefinitionRegistry中找出
名称为“messageSource”且类型为MessageSource的Bean，将这个Bean定义的信息资源加载为容器级的国际化信息资源。


----------------------------------------------------国际化MessageSource-------------------------------------------------------
