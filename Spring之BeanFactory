******************************************   基本容器-BeanFactory   ****************************************************

1.BeanFactory接口简述： 
是Spring bean容器的根接口.提供获取bean,是否包含bean,是否单例与原型,获取bean类型,bean 别名的方法 
2.BeanFactory的三个子接口： 
HierarchicalBeanFactory： extends BeanFactory 提供父容器的访问功能 
ListableBeanFactory： extends BeanFactory 提供了批量获取Bean的方法 
AutowireCapableBeanFactory：extends BeanFactory 在BeanFactory基础上实现对已存在实例的管理 

ConfigurableBeanFactory: extends HierarchicalBeanFactory

ConfigurableListableBeanFactory：extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory
继承了上述的所有接口，增加了其他功能：比如类加载器,类型转化,属性编辑器,BeanPostProcessor,作用域,bean定义,处理bean依赖关系, bean如何销毁… 

DefaultListableBeanFactory extends AbstractAutowireCapableBeanFactory
		implements ConfigurableListableBeanFactory, BeanDefinitionRegistry
实现了ConfigurableListableBeanFactory，实现上述BeanFactory所有功能。它还可以注册BeanDefinition.




2.BeanFactory接口内容：
public interface BeanFactory {
    String FACTORY_BEAN_PREFIX = "&";
    Object getBean(String name) throws BeansException;                                           根据名称获取Bean
    <T> T getBean(String name, Class<T> requiredType) throws BeansException;                     根据类型获取Bean
    <T> T getBean(Class<T> requiredType) throws BeansException;                                  获取Bean
    Object getBean(String name, Object... args) throws BeansException;                           获取Bean
    boolean containsBean(String name);                                                           是否为单实例
    boolean isSingleton(String name) throws NoSuchBeanDefinitionException;                       是否为原型（多实例） 
    boolean isPrototype(String name) throws NoSuchBeanDefinitionException;                       名称、类型是否匹配
    boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException;  根据实例的名字 获取类型  
    Class<?> getType(String name) throws NoSuchBeanDefinitionException;                          根据实例的名字获取实例的别名数组
    String[] getAliases(String name);
  
}



3.ListableBeanFactory接口内容：
public interface ListableBeanFactory extends BeanFactory {
    //BeanDefinition相关
    boolean containsBeanDefinition(String beanName);
    int getBeanDefinitionCount();
    String[] getBeanDefinitionNames();
    
    //跟据bean 的类型获取bean .它不会检查嵌套的FactoryBean创建的bean 
    String[] getBeanNamesForType(ResolvableType type); 
    String[] getBeanNamesForType(Class<?> type); 
    String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit); 
    <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException; 
    <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException;
    
    //根据注解查找相关BeanName数组
    String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType); 
    //根据注解查找相关Bean的Map
    Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException; 
    //查找一个Bean上的注解
    <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType);
    
}



获取bean时,Spring 鼓励使用这个接口定义的api. 主要提供三类方法： 
1.获取BeanDefinition 
2.批量获取BeanName和Bean（返回数组和Map） 
3.注解相关

示例代码如下：
@Controller(value = "OK")
public class FactoryTest {

    public static void main(String[] args) {
        DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
        RootBeanDefinition definition = new RootBeanDefinition(FactoryTest.class);
        factory.registerBeanDefinition("test", definition);

        System.out.println(
              Arrays.toString(
                      factory.getBeanNamesForAnnotation(Controller.class)));
        System.out.println(factory.getBeansWithAnnotation(Controller.class));
        System.out.println(factory.findAnnotationOnBean("test",Controller.class));

    }
}

结果如下：
[test] 
{test=FactoryTest@d041cf}
@org.springframework.stereotype.Controller(value=OK)


4.AutowireCapableBeanFactory接口内容：
public interface AutowireCapableBeanFactory extends BeanFactory {

    int AUTOWIRE_NO = 0;//不使用自动装配 
    int AUTOWIRE_BY_NAME = 1;//通过名称自动装配 
    int AUTOWIRE_BY_TYPE = 2;//通过类型自动装配  
    int AUTOWIRE_CONSTRUCTOR = 3;//构造器装配 
    @Deprecated
    int AUTOWIRE_AUTODETECT = 4;//已过时  


    //------ 创建外部Bean实例的典型方法---------------------------
    //根据指定Class创建一个全新的Bean实例
    <T> T createBean(Class<T> beanClass) throws BeansException;
    //给定对象，根据注释、后处理器等，进行自动装配
    void autowireBean(Object existingBean) throws BeansException;
    // 根据Bean名的BeanDefinition装配这个未加工的Object，执行回调和各种后处理器。
    Object configureBean(Object existingBean, String beanName) throws BeansException;
    //分解Bean在工厂中定义的这个指定的依赖descriptor
    Object resolveDependency(DependencyDescriptor descriptor, String beanName) throws BeansException; 


    //-----------Bean实例生命周期相关方法-------------------
    / 根据给定的类型和指定的装配策略，创建一个新的Bean实例
    Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException;
    //
    Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) throws BeansException; 
    //根据名称或类型自动装配
    void autowireBeanProperties(Object existingBean, int autowireMode, boolean dependencyCheck) throws BeansException; 
    //自动装配
    void applyBeanPropertyValues(Object existingBean, String beanName) throws BeansException;
    //初始化一个Bean...
    Object initializeBean(Object existingBean, String beanName) throws BeansException;
    //初始化之前执行BeanPostProcessors
    Object applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName) throws BeansException;
    //初始化之后执行BeanPostProcessors
    Object applyBeanPostProcessorsAfterInitialization(Object existingBean, String beanName) throws BeansException;
    //销毁一个Bean
    void destroyBean(Object existingBean);
    //分解指定的依赖
    Object resolveDependency(DependencyDescriptor descriptor, String beanName,
            Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException;
}

这个接口定义了将容器中的Bean按某种规则（如按名字，类型的匹配等）进行自动装配的方法。在我们开发的应用中很少用到，
像ApplicationContext这样的外观实现类不会实现这个接口。
它更多的作用是和其它组件结合，比如Struts2等，把不在spring容器中的bean加入到spring的生命周期中。


5.ConfigurableBeanFactory接口内容：
public interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {

    //常量-单例
    String SCOPE_SINGLETON = "singleton"; 
    //常量-原型
    String SCOPE_PROTOTYPE = "prototype";
    //设置父BeanFactory
    void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException; 
    //以下四个：设置和获取BeanClassLoader
    void setBeanClassLoader(ClassLoader beanClassLoader); 
    ClassLoader getBeanClassLoader(); 
    void setTempClassLoader(ClassLoader tempClassLoader); 
    ClassLoader getTempClassLoader();

    //是否需要缓存bean metadata,比如bean difinition 和 解析好的classes.默认开启缓存
    void setCacheBeanMetadata(boolean cacheBeanMetadata); 
    boolean isCacheBeanMetadata();

    // 定义用于解析bean definition的表达式解析器
    void setBeanExpressionResolver(BeanExpressionResolver resolver); 
    BeanExpressionResolver getBeanExpressionResolver();

    //类型转化器
    void setConversionService(ConversionService conversionService); 
    ConversionService getConversionService();

    //属性编辑器
    void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar);

    //BeanFactory用来转换bean属性值或者参数值的自定义转换器
    void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass); 
    void copyRegisteredEditorsTo(PropertyEditorRegistry registry);

    //类型转换器
    void setTypeConverter(TypeConverter typeConverter); 
    TypeConverter getTypeConverter(); 
    void addEmbeddedValueResolver(StringValueResolver valueResolver); 
    String resolveEmbeddedValue(String value);

    //Bean处理器
    void addBeanPostProcessor(BeanPostProcessor beanPostProcessor); 
    int getBeanPostProcessorCount();

    //作用域定义
    void registerScope(String scopeName, Scope scope); 
    String[] getRegisteredScopeNames(); 
    Scope getRegisteredScope(String scopeName);

    //访问权限控制
    AccessControlContext getAccessControlContext();

    //合并其他ConfigurableBeanFactory的配置,包括上面说到的BeanPostProcessor,作用域等
    void copyConfigurationFrom(ConfigurableBeanFactory otherFactory);

    //bean定义处理
    void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException; 
    void resolveAliases(StringValueResolver valueResolver); 
    BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException; 
    boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException;

    //bean创建状态控制.在解决循环依赖时有使用
    void setCurrentlyInCreation(String beanName, boolean inCreation); 
    boolean isCurrentlyInCreation(String beanName);

    //处理bean依赖问题
    void registerDependentBean(String beanName, String dependentBeanName); 
    String[] getDependentBeans(String beanName); 
    String[] getDependenciesForBean(String beanName);

    //bean生命周期管理-- 销毁bean
    void destroyBean(String beanName, Object beanInstance); 
    void destroyScopedBean(String beanName); 
    void destroySingletons();
}

ConfigurableBeanFactory同时继承了HierarchicalBeanFactory 和 SingletonBeanRegistry 这两个接口，即同时继承了分层和单例类注册的功能。


6.ConfigurableListableBeanFactory接口内容：
public interface ConfigurableListableBeanFactory
        extends ListableBeanFactory, AutowireCapableBeanFactory, ConfigurableBeanFactory {

    //设置忽略的依赖关系,注册找到的特殊依赖
    void ignoreDependencyType(Class<?> type); 
    void ignoreDependencyInterface(Class<?> ifc); 
    void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue); 
    boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)
            throws NoSuchBeanDefinitionException;

    // 获取bean定义 (可以访问属性值跟构造方法的参数值)
    BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;

    //迭代BeanNames
    Iterator<String> getBeanNamesIterator();

    //清除元数据缓存
    void clearMetadataCache();

    //锁定配置信息.在调用refresh时会使用到.
    void freezeConfiguration(); 
    boolean isConfigurationFrozen();

    //预加载不是懒加载的单例.用于解决循环依赖问题
    void preInstantiateSingletons() throws BeansException;

}

7.AbstractBeanFactory
这个类主要提供了获取Bean的相关方法
实现了BeanFactory的方法
主要实现了getBean方法
实现了HierarchicalBeanFactory的方法
实现了ConfigurableBeanFactory

留给子类实现的方法
protected abstract boolean containsBeanDefinition(String beanName);
protected abstract BeanDefinition getBeanDefinition(String beanName) throws BeansException;
protected abstract Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException;

8.AbstractAutowireCapableBeanFactory
这个类主要实现了创建Bean的相关方法

9.DefaultListableBeanFactory















我们如何得到Bean对象，spring都做了那些工作？BeanFactory提供了多种方式得到bean对象，getBean()方法是最核心得到bean对象.
getBean主要由AbstractBeanFactory、AbstractAutowireCapableBeanFactory、以及DefaultListableBeanFactory实现
AbstractBeanFactory 实现了依赖关系处理
AbstractAutowireCapableBeanFactory 实现了bean的create过程
DefaultListableBeanFactory 实现了BeanDefinition的管理

******************************************   基本容器-BeanFactory   ****************************************************



****************************************** BeanFactory中Bean的实例化过程  ***********************************************
实例:
class MyBeanPostProcessor implements BeanPostProcessor {

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("=======BeanPostProcessor的postProcessBeforeInitialization=========");
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("=======BeanPostProcessor的postProcessAfterInitialization=========");
        return bean;
    }
} 

public class Tester implements InitializingBean, DisposableBean, BeanNameAware {

    private String p;

    public Tester() {
        System.out.println("---构造方法---");
        System.out.println("p===" + p);
    }

    public void setP(String p) {
        this.p = p;
    }

    @Override
    public void setBeanName(String name) {
        System.out.println("p===" + p);
        System.out.println("---BeanNameAware接口setBeanName---");
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("---InitializingBean接口afterPropertiesSet---");
    }

    public void initMethod() {
        System.out.println("---指定的InitMethod---");
    }

    @Override
    public void destroy() throws Exception {
        System.out.println("---DisposableBean的destroy方法---");
    }

    public void destroyMethod() {
        System.out.println("--指定的Destroy方法---");
    }

    @Override
    public String toString() {
        return "toString+++"+p;
    }


    public static void main(String[] args) throws Exception {
        //创建一个BeanFactory
        DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
        factory.addBeanPostProcessor(new MyBeanPostProcessor());

        //构造一个BeanDefinition
        RootBeanDefinition definition = new RootBeanDefinition(Tester.class);
        definition.setInitMethodName("initMethod");
        definition.setDestroyMethodName("destroyMethod");

        //设置这个bean的属性
        Map<String, Object> map = new HashMap<>();
        map.put("p", "jack");
        definition.setPropertyValues(new MutablePropertyValues(map));

        //注册BeanDefinition
        factory.registerBeanDefinition("tester", definition);

        //执行获取和销毁bean的方法
        factory.getBean("tester");
        factory.destroySingleton("tester");
    }
}

输出如下：
---构造方法---
p===null
p===jack
---BeanNameAware接口setBeanName---
=======BeanPostProcessor的postProcessBeforeInitialization=========
---InitializingBean接口afterPropertiesSet---
---指定的InitMethod---
=======BeanPostProcessor的postProcessAfterInitialization=========
---DisposableBean的destroy方法---
--指定的Destroy方法---

我们可以得到实例化bean的大致过程 
1：调用Bean的默认构造方法（当然也可以是指定的其它构造方法），生成bean实例。 
2：检查BeanDefinition中是否注入了Bean的属性值，如果有注入，则在bean实例的基础上对其属性进行注入。 
3 : 调用Aware相关接口的方法 
4 :postProcessBeforeInitialization 
5：检查Bean是否实现了InitializingBean接口，如果实现了此接口，则调用afterPropertiesSet()方法。 
6：检查Bean配置文件中是否指定了initMethodName属性，如果已指定，则调用此属性对应方法。 
7 : postProcessAfterInitialization

销毁过程 
1：检查Bean是否实现了DisposableBean 接口，如果实现了此接口，则调用destroy()方法。 
2：检查Bean配置文件中是否指定了destroyMethodName属性，如果已指定，则调用此属性对应方法

AbstractBeanFactory#doGetBean(..)源码

无论以何种方式获取Bean,都会调用AbstractBeanFactory#doGetBean(..)方法。

去除了这个方法的非重点代码, 保留了部分重要的代码，如下：
protected <T> T doGetBean( String name, Class<T> requiredType, Object[] args, boolean typeCheckOnly)  {

        final String beanName = transformedBeanName(name);
        Object bean;


        Object sharedInstance = getSingleton(beanName);//是否已经创建过Bean
        if (sharedInstance != null && args == null) {
            //1.查找手动注册的Bean实例 或者已经创建过的Bean实例
            bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
        }

        else { 
            // 2.检查父容器是否含有这个Bean，有则返回
            BeanFactory parentBeanFactory = getParentBeanFactory();
            if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
                String nameToLookup = originalBeanName(name);
                if (args != null) {
                    return (T) parentBeanFactory.getBean(nameToLookup, args);
                }
                else {
                    return parentBeanFactory.getBean(nameToLookup, requiredType);
                }
            } 

            //3.获取MergedLocalBeanDefinition
            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
            checkMergedBeanDefinition(mbd, beanName, args);

            // 初始化指定的依赖Bean
            String[] dependsOn = mbd.getDependsOn();
            if (dependsOn != null) {
                for (String dependsOnBean : dependsOn) { 
                    registerDependentBean(dependsOnBean, beanName);
                    getBean(dependsOnBean);
                }
            }

            //********************重点*******************
            // 创建单实例Bean
            if (mbd.isSingleton()) {
                sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
                    @Override
                    public Object getObject() throws BeansException { 
                        return createBean(beanName, mbd, args); 
                    }
                });
                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
            }
            //***************************************

            //创建多实例Bean
            else if (mbd.isPrototype()) {
                     //.....
            } 

        }

        // 根据指定的类型进行转换
        if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {
             return getTypeConverter().convertIfNecessary(bean, requiredType);

        }
        return (T) bean;
    }
    
    
1.查找手动注册的Bean实例 或者已经创建过的Bean实例 
获取DefaultSingletonBeanRegistry中保存的Bean 
2. 代码中 //***之间就是创建Bean的主要代码。下面将针对这部分进行讲解。

//********************重点*******************
// 创建单实例Bean
if (mbd.isSingleton()) {
    sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {
            @Override
            public Object getObject() throws BeansException { 
                return createBean(beanName, mbd, args); //1
            }
    });
    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
}
//***************************************

匿名类ObjectFactory的createBean部分，实际调用AbstractAutowireCapableBeanFactory#createBean(..)方法
protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args)   {


    RootBeanDefinition mbdToUse = mbd;  
    //设置RootBeanDefinition的BeanClass
    Class<?> resolvedClass = resolveBeanClass(mbd, beanName);
    if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
        mbdToUse = new RootBeanDefinition(mbd);
        mbdToUse.setBeanClass(resolvedClass);
    }

    // Prepare method overrides.
    mbdToUse.prepareMethodOverrides();

    // 允许BeanPostProcessors返回一个代理代替Bean实例
    Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
    if (bean != null) {
        return bean;
    }

    //实际生成Bean的方法,调用AbstractAutowireCapableBeanFactory#doCreateBean(..)
    Object beanInstance = doCreateBean(beanName, mbdToUse, args); 
    return beanInstance;
}

AbstractAutowireCapableBeanFactory#doCreateBean(..)

protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args) {
    // 创建BeanWrapper
    BeanWrapper instanceWrapper = null;
    if (mbd.isSingleton()) {
        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
    }
    if (instanceWrapper == null) {
        instanceWrapper = createBeanInstance(beanName, mbd, args);
    }

    final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
    Class<?> beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);

    // Allow post-processors to modify the merged bean definition.
    synchronized (mbd.postProcessingLock) {
        if (!mbd.postProcessed) {
            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
            mbd.postProcessed = true;
        }
    }


    Object exposedObject = bean;
    //设置Bean的属性值     
    populateBean(beanName, mbd, instanceWrapper);

    if (exposedObject != null) {
        //***************重点***************
        //处理Bean（Aware接口相关方法，前处理器，初始化方法，后处理器）
        exposedObject = initializeBean(beanName, exposedObject, mbd);
        //调用的是AbstractAutowireCapableBeanFactory#initializeBean(..)方法
        //**********************************

    }

    // Register bean as disposable.
    registerDisposableBeanIfNecessary(beanName, bean, mbd); 

    return exposedObject;
}


AbstractAutowireCapableBeanFactory#initializeBean(..)方法

protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
    //调用Aware相关接口的方法 
    invokeAwareMethods(beanName, bean);

    Object wrappedBean = bean;
    //Bean前处理器
    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);

    //调用指定的InitMethod方法
    invokeInitMethods(beanName, wrappedBean, mbd);

    //调用Bean后处理器
    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);

    return wrappedBean;
}

****************************************** BeanFactory中Bean的实例化过程  ***********************************************
