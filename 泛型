泛型是Java 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。
这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。

编译的时候通过增加强制类型转换的代码，来避免用户编写出可能引发ClassCastException的代码

泛型的本质便是类型参数化，通俗的说就是用一个变量来表示类型，这个类型可以是String,Integer等等不确定，表明可接受的类型。
为何要引入泛型，即泛型与Object的优势：
由于泛型可以接受多个参数，而Object经过强制类型转换可以转换为任何类型，既然二者都具有相同的作用，为何还要引进泛型呢？
泛型可以把使用Object的错误提前到编译后，而不是运行后，提升安全性。

Java泛型被引入的好处是安全简单，在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。
在Java SE 1.5之前，没有泛型的情况的下，通过对类型Object的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，
而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，
这是一个安全隐患。

ArrayList<String> stringValues=new ArrayList<String>();  
这样的代码具有更好的可读性，我们一看就知道该集合用来保存String类型的对象，而不是仅仅依赖变量名称来暗示我们期望的类型。
现在，如果我们向ArrayList<String>添加Integer类型的对象，将会出现编译错误。
Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
The method add(int, String) in the type ArrayList<String> is not applicable for the arguments (int)
at generic.GenericType.main(GenericType.java:8)
编译器会自动帮我们检查，避免向集合中插入错误类型的对象，从而使得程序具有更好的安全性。
总之，泛型通过类型参数使得我们的程序具有更好的可读性和安全性。



泛型在使用中还有一些规则和限制：
1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。
2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。
3、泛型的类型参数可以有多个。
4、泛型的参数类型可以使用extends语句，例如。习惯上成为“有界类型”。
5、泛型的参数类型还可以是通配符类型。
如：Class<?> classType = Class.forName(java.lang.String);  


实现：
类型擦除（type erasure）
Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，
会在编译器在编译的时候去掉。这个过程就称为类型擦除。

如在代码中定义的List<object>和List<String>等类型，在编译后都会编程List。JVM看到的只是List，
而由泛型附加的类型信息对JVM来说是不可见的。Java编译器会在编译时尽可能的发现可能出错的地方，
但是仍然无法避免在运行时刻出现类型转换异常的情况。类型擦除也是Java的泛型实现方法与C++模版机制实现方式之间的重要区别。

实验：
public class GenericType {  
    public static void main(String[] args) {    
        ArrayList<String> arrayString=new ArrayList<String>();     
        ArrayList<Integer> arrayInteger=new ArrayList<Integer>();     
        System.out.println(arrayString.getClass()==arrayInteger.getClass());    
    }    
} 
输出：true

在这个例子中，我们定义了两个ArrayList数组，不过一个是ArrayList<String>泛型类型，只能存储字符串。一个是ArrayList<Integer>泛型类型，只能存储整型。
最后，我们通过arrayString对象和arrayInteger对象的getClass方法获取它们的类信息并比较，发现结果为true。
这是为什么呢，明明我们定义了两种不同的类型？因为，在编译期间，所有的泛型信息都会被擦除，List<Integer>和List<String>类型，
在编译后都会变成List类型（原始类型）。Java中的泛型基本上都是在编译器这个层次来实现的，这也是Java的泛型被称为“伪泛型”的原因。


类型擦除后保留的原始类型
原始类型（raw type）就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型。无论何时定义一个泛型类型，相应的原始类型都会被自动地提供。类型变量被擦除（crased），并使用其限定类型（无限定的变量用Object）替换。

class Pair<T> {    
  private T value;    
  public T getValue() {    
    return value;    
  }    
  public void setValue(T  value) {    
    this.value = value;    
  }    
}   

Pair<T>的原始类型为：
class Pair {    
  private Object value;    
  public Object getValue() {    
    return value;    
  }    
  public void setValue(Object  value) {    
    this.value = value;    
  }    
}  

因为在Pair<T>中，T是一个无限定的类型变量，所以用Object替换。其结果就是一个普通的类，如同泛型加入java变成语言之前已经实现的那样。
在程序中可以包含不同类型的Pair，如Pair<String>或Pair<Integer>，但是，擦除类型后它们就成为原始的Pair类型了，原始类型都是Object。

实验：
public class ReflectInGeneric {  
    public static void main(String[] args) throws IllegalArgumentException,   
                        SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {    
        ArrayList<Integer> array=new ArrayList<Integer>();    
        array.add(1);//这样调用add方法只能存储整形，因为泛型类型的实例为Integer    
        array.getClass().getMethod("add", Object.class).invoke(array, "asd");    
        for (int i=0;i<array.size();i++) {    
            System.out.println(array.get(i));    
        }    
    }    
}  

输出：
1
asd

为什么？ArrayList<Integer>中插入String类型的对象，编译时会报错。现在为什么又可以了呢？
我们在程序中定义了一个ArrayList<Integer>泛型类型，如果直接调用add方法，那么只能存储整形的数据。
不过当我们利用反射调用add方法的时候，却可以存储字符串。这说明ArrayList<Integer>泛型信息在编译之后被擦除了，只保留了原始类型，
类型变量（T）被替换为Object，在运行时，我们可以向其中插入任意类型的对象。

但是，并不推荐以这种方式操作泛型类型，因为这违背了泛型的初衷（减少强制类型转换以及确保类型安全）。
当我们从集合中获取元素时，默认会将对象强制转换成泛型参数指定的类型（这里是Integer），如果放入了非法的对象这个强制转换过程就会出现异常。


既然类型变量会在编译的时候擦除掉，那为什么定义了ArrayList<Integer>泛型类型，而不允许向其中插入String对象呢？
不是说泛型变量Integer会在编译时候擦除变为原始类型Object吗，为什么不能存放别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？
java是如何解决这个问题的呢？
java编译器是通过先检查代码中泛型的类型，然后再进行类型擦除，再进行编译的。
代码为例：
Pair<Integer> pair=new Pair<Integer> ();  
pair.setValue(3);  
Integer integer=pair.getValue();  
System.out.println(integer);  
擦除getValue()的返回类型后将返回Object类型，编译器自动插入Integer的强制类型转换。也就是说，编译器把这个方法调用翻译为两条字节码指令：
1、对原始方法Pair.getValue的调用
2、将返回的Object类型强制转换为Integer


如果类型变量有限定，那么原始类型就用第一个边界的类型变量来替换。
比如Pair这样声明：
public class Pair<T extends Comparable& Serializable> {   
那么原始类型就是Comparable

注意：
如果Pair这样声明public class Pair<T extends Serializable&Comparable> ，那么原始类型就用Serializable替换，
而编译器在必要的时要向Comparable插入强制类型转换。为了提高效率，应该将标签（tagging）接口（即没有方法的接口）放在边界限定列表的末尾。
要区分原始类型和泛型变量的类型
在调用泛型方法的时候，可以指定泛型，也可以不指定泛型。
在不指定泛型的情况下，泛型变量的类型为 该方法中的几种类型的同一个父类的最小级，直到Object。
在指定泛型的时候，该方法中的几种类型必须是该泛型实例类型或者其子类。

public class Test{    
  public static void main(String[] args) {    
    /**不指定泛型的时候*/    
    int i=Test.add(1, 2); //这两个参数都是Integer，所以T为Integer类型    
    Number f=Test.add(1, 1.2);//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Number    
    Object o=Test.add(1, "asd");//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Object    
    
    /**指定泛型的时候*/    
    int a=Test.<Integer>add(1, 2);//指定了Integer，所以只能为Integer类型或者其子类    
    int b=Test.<Integer>add(1, 2.2);//编译错误，指定了Integer，不能为Float    
    Number c=Test.<Number>add(1, 2.2); //指定为Number，所以可以为Integer和Float    
  }    
  
  //这是一个简单的泛型方法    
  public static <T> T add(T x,T y){    
    return y;    
  }    
}  

其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型类型为Object，就比如ArrayList中，
如果不指定泛型，那么这个ArrayList中可以放任意类型的对象。


泛型相关问题
1、泛型类型引用传递问题
在Java中，像下面形式的引用传递是不允许的：
ArrayList<String> arrayList1=new ArrayList<Object>();//编译错误    
ArrayList<Object> arrayList1=new ArrayList<String>();//编译错误  
因为：
ArrayList<Object> arrayList1=new ArrayList<Object>();    
          arrayList1.add(new Object());    
          arrayList1.add(new Object());    
          ArrayList<String> arrayList2=arrayList1;//编译错误  
          //Object转String出错
          
ArrayList<String> arrayList1=new ArrayList<String>();    
          arrayList1.add(new String());    
          arrayList1.add(new String());    
          ArrayList<Object> arrayList2=arrayList1;//编译错误 
          //泛型出现的原因，就是为了解决类型转换的问题。我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。
          
2、泛型类型变量不能是基本数据类型
就比如，没有ArrayList<double>，只有ArrayList<Double>。因为当类型擦除后，ArrayList的原始类中的类型变量（T）替换为Object，
但Object类型不能存储double值。
基本类型都需要使用包装类型

3、运行时类型查询
ArrayList<String> arrayList=new ArrayList<String>();  
因为类型擦除之后，ArrayList<String>只剩下原始类型，泛型信息String不存在了。那么，运行时进行类型查询的时候使用下面的方法是错误的：
if( arrayList instanceof ArrayList<String>)    
java限定了这种类型查询的方式，？为通配符，也即非限定符。
if( arrayList instanceof ArrayList<?>)     

4、泛型在静态方法和静态类中的问题
泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数
public class Test2<T> {      
    public static T one;   //编译错误      
    public static  T show(T one){ //编译错误      
        return null;      
    }      
}    

因为泛型类中的泛型参数的实例化是在定义泛型类型对象（例如ArrayList<Integer>）的时候指定的，而静态变量和静态方法不需要使用对象来调用。
对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。
但是要注意区分下面的一种情况：
public class Test2<T> {      
    public static <T >T show(T one){//这是正确的      
        return null;      
    }      
}  
因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的T，而不是泛型类中的T。



通配符
通配符只能出现在引用的定义中，而不能出现在创建对象中

通配符上界
List<? extends Number> list;
其中<? extends Number>表示通配符的上边界，即“?”只能被赋值为Number或其子类型。

通配符下界
List<? super Integer> list;
其中<? super Integer>表示通配符的下边界，即“?”只能被赋值为Integer或其父类型，直至Object类

无界通配符
知道了通配符的上界和下界，其实也等同于知道了无界通配符，不加任何修饰即可，单独一个“？”。如List<?>，“？”可以代表任意类型，“任意”也就是未知类型。
List<Object>与List<?>并不等同，List<Object>是List<?>的子类。还有能往List<?> list里添加任意对象，除了null。

通配符小结
1. 方法参数带有通配符会更加通用；
2. 带有通配符类型的对象，被限制了与泛型相关方法的使用；
3. 下边界通配符：可以使用返回值为泛型变量的方法；
4. 上边界通配符：可以使用参数为泛型变量的方法。


泛型好处：
1.保证了类型安全
2.消除了强制类型转换（隐式转换），使得代码可读性更高，使代码更加优雅。
3.提高了代码的通用性---一般当我们对于一段代码，我们更喜欢后期决定他的类型，要达到这种目的，就使用泛型和泛型的类型参数




面试题：
1. Java中的泛型是什么 ? 使用泛型的好处是什么?
泛型是一种参数化类型的机制。它可以使得代码适用于各种类型，从而编写更加通用的代码，例如集合框架。
泛型是一种编译时类型确认机制。它提供了编译期的类型安全，确保在泛型类型（通常为泛型集合）上只能使用正确类型的对象，
避免了在运行时出现ClassCastException。

2、Java的泛型是如何工作的 ? 什么是类型擦除 ?
泛型的正常工作是依赖编译器在编译源码的时候，先进行类型检查，然后进行类型擦除并且在类型参数出现的地方插入强制转换的相关指令实现的。
编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。例如List<String>在运行时仅用一个List类型来表示。
为什么要进行擦除呢？这是为了避免类型膨胀。

3. 什么是泛型中的限定通配符和非限定通配符 ?
限定通配符对类型进行了限制。有两种限定通配符，一种是<? extends T>它通过确保类型必须是T的子类来设定类型的上界，
另一种是<? super T>它通过确保类型必须是T的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。
另一方面<?>表示了非限定通配符，因为<?>可以用任意类型来替代。

4. List<? extends T>和List <? super T>之间有什么区别 ?
这和上一个面试题有联系，有时面试官会用这个问题来评估你对泛型的理解，而不是直接问你什么是限定通配符和非限定通配符。
这两个List的声明都是限定通配符的例子，List<? extends T>可以接受任何继承自T的类型的List，而List<? super T>可以接受任何T的父类构成的List。
例如List<? extends Number>可以接受List<Integer>或List<Float>。在本段出现的连接中可以找到更多信息。


5.Java中List<?>和List<Object>之间的区别是什么?
List<?> 是一个未知类型的List，而List<Object>其实是任意类型的List。你可以把List<String>, List<Integer>赋值给List<?>，
却不能把List<String>赋值给List<Object>。


6.Array不支持泛型
如果允许了泛型数组，那么编译器添加的强制类型转换的代码就会有可能是错误的。
GenTest<String> genArr[] = new GenTest<String>[2];
Object[] test = genArr;
GenTest<StringBuffer> strBuf = new GenTest<StringBuffer>();
strBuf.setValue(new StringBuffer());
test[0] = strBuf;
GenTest<String> ref = genArr[0]; //上面两行相当于使用数组移花接木，让Java编译器把GenTest<StringBuffer>当作了GenTest<String>
String value = ref.getValue();// 这里是重点！

String val = ref.getValue();会进行隐式强转，但是里面的StringBuffer强转为String会出错。
泛型是为了消灭ClassCastException而出现的，但是在这个时候它自己却引发了ClassCastException
所以这是不允许的

Sun的文档示例：
List<String>[] lsa = new List<String>[10]; // Not really allowed.    
Object o = lsa;    
Object[] oa = (Object[]) o;    
List<Integer> li = new ArrayList<Integer>();    
li.add(new Integer(3));    
oa[1] = li; // Unsound, but passes run time store check    
String s = lsa[1].get(0); // Run-time error: ClassCastException.    

这种情况下，由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的，所以可以给oa[1]赋上一个ArrayList<Integer>而不会出现异常，
但是在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，
如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。


7. 编写一段泛型程序来实现LRU缓存
Least recently used，最近最少使用
算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。
最常见的实现是使用一个链表保存缓存数据
1. 新数据插入到链表头部；
2. 每当缓存命中（即缓存数据被访问），则将数据移到链表头部；
3. 当链表满的时候，将链表尾部的数据丢弃。
当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。
命中时需要遍历链表，找到命中的数据块索引，然后需要将数据移到头部。

package com.jd.test;
import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
/**
 * 缓存类（最近最少未使用）
 * 
 * @author liuzhenfeng
 * 
 * @param <K,V>
 */
public class LRUCache<K, V> extends LinkedHashMap<K, V> implements Serializable {
	/**
	 * 缓存默认大小
	 */
	public static final int DEFAULT_CAPASITY = 20;
	/**
	 * 缓存实际大小
	 */
	public static int CACHE_CAPASITY = DEFAULT_CAPASITY;
	/**
	 * 线程同步锁
	 */
	private static final Lock lock = new ReentrantLock();
	public LRUCache() {
		super(DEFAULT_CAPASITY);
		CACHE_CAPASITY = DEFAULT_CAPASITY;
	}
	public LRUCache(int size) {
		super(size);
		CACHE_CAPASITY = size;
	}
	/*
	 * 清空緩存
	 * 
	 * @see java.util.LinkedHashMap#clear()
	 */
	@Override
	public void clear() {
		try {
			lock.lock();
			super.clear();
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 判断是否包含该对象
	 * 
	 * @see java.util.LinkedHashMap#containsValue(java.lang.Object)
	 */
	@Override
	public boolean containsValue(Object value) {
		try {
			lock.lock();
			return super.containsValue(value);
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 从缓存中查询对象
	 * 
	 * @see java.util.LinkedHashMap#get(java.lang.Object)
	 */
	@Override
	public V get(Object key) {
		try {
			lock.lock();
			return super.get(key);
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 是否删除最早未使用缓存对象
	 * 
	 * @see java.util.LinkedHashMap#removeEldestEntry(java.util.Map.Entry)
	 */
	@Override
	protected boolean removeEldestEntry(java.util.Map.Entry<K, V> eldest) {
		try {
			lock.lock();
			return this.size() > CACHE_CAPASITY;
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 判断缓存中是否包含该key
	 * 
	 * @see java.util.HashMap#containsKey(java.lang.Object)
	 */
	@Override
	public boolean containsKey(Object key) {
		try {
			lock.lock();
			return super.containsKey(key);
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 判断缓存是否为空
	 * 
	 * @see java.util.HashMap#isEmpty()
	 */
	@Override
	public boolean isEmpty() {
		try {
			lock.lock();
			return super.isEmpty();
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 放入缓存
	 * 
	 * @see java.util.HashMap#put(java.lang.Object, java.lang.Object)
	 */
	@Override
	public V put(K key, V value) {
		try {
			lock.lock();
			return super.put(key, value);
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 从缓存中删除
	 * 
	 * @see java.util.HashMap#remove(java.lang.Object)
	 */
	@Override
	public V remove(Object key) {
		try {
			lock.lock();
			return super.remove(key);
		} finally {
			lock.unlock();
		}
	}
	/*
	 * 缓存大小
	 * 
	 * @see java.util.HashMap#size()
	 */
	@Override
	public int size() {
		try {
			lock.lock();
			return super.size();
		} finally {
			lock.unlock();
		}
	}
}












